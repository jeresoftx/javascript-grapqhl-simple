scalar DateTime
scalar EmailAddress
scalar PhoneNumber
scalar PositiveInt
scalar JSON
scalar NonEmptyString

"User object"
type User {
  id: ID!
  name: String!
  lastName: String!
  fullName: String!
  emails: [Email!]!
  phones: [Phone!]!
  lastConnected: DateTime
  createdAt: DateTime!
  updateAt: DateTime!
}

"Email object. The main email is the one with the variable main equal to true"
type Email {
  email: EmailAddress!
  main: Boolean!
}

"Email object. The main phone is the one with the variable main equal to true"
type Phone {
  email: PhoneNumber!
  main: Boolean!
}

"Permission object"
type Permission {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"Permission object"
type PermissionEmbeded {
  id: ID!
  permission: String!
}

"Role object"
type Role {
  id: ID!
  name: String!
  description: String
  permissions: [PermissionEmbeded!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ParamsInput {
  offset: PositiveInt
  limit: PositiveInt
  sort: JSON
  filter: JSON
}

input EmailInput {
  email: EmailAddress!
  main: Boolean!
}

input PhoneInput {
  phone: PhoneNumber!
  main: Boolean!
}

input PermissionInput {
  _id: ID!
  name: NonEmptyString!
}

type Query {
  "retrun the version of the graphql system"
  version: String!

  "User lists"
  users(params: ParamsInput!): [User!]!

  "Read one user"
  user(id: ID!): User

  "Read my info"
  me: User

  "Permission lists"
  permissions(params: ParamsInput!): [Permission!]!

  "Read one permission"
  permission(id: ID!): Permission

  "Role lists"
  roles(params: ParamsInput!): [Role!]!

  "Read one role"
  role(id: ID!): Role
}

type Mutation {
  "Create a new user"
  addUser(
    name: NonEmptyString!
    lastName: NonEmptyString!
    username: NonEmptyString!
    email: EmailAddress!
    phone: PhoneNumber!
    password: String!
  ): User!

  "Delete a existing user"
  deleteUser(id: ID!): Boolean!

  "Update a new user"
  editUser(id: ID!, name: NonEmptyString!, lastName: NonEmptyString!): User

  "Create a new permission"
  addPermission(
    name: NonEmptyString!
    description: NonEmptyString!
  ): Permission!

  "Update a new permission"
  editPermission(
    id: ID!
    name: NonEmptyString!
    description: NonEmptyString!
  ): Permission

  "Delete a existing permission"
  deletePermission(id: ID!): Boolean!

  "Create a new role"
  addRole(
    name: NonEmptyString!
    description: NonEmptyString!
    permission: PermissionInput!
  ): Role!

  "Update a new role"
  editRole(id: ID!, name: NonEmptyString!, description: NonEmptyString!): Role

  "Delete a existing role"
  deleteRole(id: ID!): Boolean!

  addPermissionToRole(idRole: ID!, idPermission: ID!): Boolean!
  removePermissionToRole(idRole: ID!, idPermission: ID!): Boolean!
  login(username: String!, password: String!): String!
}
